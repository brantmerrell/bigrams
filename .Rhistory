words <- readLines(txtFile)
# convert apostrophes to digits to avoid regex split
words <- gsub("'s", "0s", words)
# split text into individual words by spaces
words <- unlist(strsplit(words, " "))
# remove punctuation that is not within words (ie. apostrophes)
words <- gsub("^[[:punct:]]+|[[:punct:]]+$", "", words)
# convert words to lowercase
words <- tolower(words)
# begin vector of bigrams as empty
bigrams <- c()
# iterate through words in search of bigrams
for(n in 2:length(words)){
# test whether word is preceded by the same word
if(words[n] == words[n-1]){
# if so, add word to list of bigrams
bigrams <- c(bigrams, words[n])
}
}
# do not attempt histogram of empty vector
if(0 == length(bigrams)){
stop("this function has no bigrams")
}
# convert bigrams to factor
bigrams <- as.factor(bigrams)
# create png file named the same as the txt file
# pngFile <- gsub("txt$","png",txtFile)
# open connection to png file
# png(pngFile)
# create histogram of bigrams
hist(as.numeric(bigrams),
main = paste("Histogram of biograms in", txtFile),
xlab = paste(levels(bigrams), collapse = ","),
border = "blue",
col = "green")
# close connection to png file
# dev.off()
# print name of png file
# print(paste("the histogram is located at", pngFile))
}
# create document with some bigrams
writeLines("two, two, three, three, three, four, four, four, four", "temp.txt")
# fun function for document
bigram("temp.txt")
bigram <- function(txtFile){
# read file
words <- readLines(txtFile)
# convert apostrophes to digits to avoid regex split
words <- gsub("'s", "0s", words)
# split text into individual words by spaces
words <- unlist(strsplit(words, " "))
# remove punctuation that is not within words (ie. apostrophes)
words <- gsub("^[[:punct:]]+|[[:punct:]]+$", "", words)
# convert words to lowercase
words <- tolower(words)
# begin vector of bigrams as empty
bigrams <- c()
# iterate through words in search of bigrams
for(n in 2:length(words)){
# test whether word is preceded by the same word
if(words[n] == words[n-1]){
# if so, add word to list of bigrams
bigrams <- c(bigrams, words[n])
}
}
# do not attempt histogram of empty vector
if(0 == length(bigrams)){
stop("this function has no bigrams")
}
# convert bigrams to factor
bigrams <- as.factor(bigrams)
# create png file named the same as the txt file
# pngFile <- gsub("txt$","png",txtFile)
# open connection to png file
# png(pngFile)
# create histogram of bigrams
hist(as.numeric(bigrams),
main = paste("Histogram of biograms in", txtFile),
xlab = paste(levels(bigrams), collapse = ", "),
border = "blue",
col = "green")
# close connection to png file
# dev.off()
# print name of png file
# print(paste("the histogram is located at", pngFile))
}
# create vector of five bigrams
words <- c("and, AND", "or, Or", "if, if", "the, the", "wh'en, wh'en", "why, why",
"where, where", "how, how", "who, who", "what, what")
# expand five unique bigrams into 1000
words <- sample(words, 1000, replace = T)
# create temp.txt document
writeLines(words, "temp.txt")
# plot using bigram function:
bigram("temp.txt")
list.files()
list.files(pattern="Rmd")
file.rename(list.files(pattern="Rmd"),"Bigrams Report (JM).Rmd")
file.edit(list.files(pattern = "Rmd"))
knitr::opts_chunk$set(echo = TRUE)
# create vector of five bigrams
words <- c("and; AND", "or, Or", "if... iF", "the, the", "wh'en, wh'en", "why, why",
"where, wheRe", "how - how?", "who? Who!", "what, what")
# expand five unique bigrams into 1000
words <- sample(words, 1000, replace = T)
# create temp.txt document
writeLines(words, "temp.txt")
# plot using bigram function:
bigram("temp.txt")
bigram <- function(txtFile){
# read file
words <- readLines(txtFile)
# convert apostrophes to digits to avoid regex split
words <- gsub("'s", "0s", words)
# split text into individual words by spaces
words <- unlist(strsplit(words, " "))
# remove punctuation that is not within words (ie. apostrophes)
words <- gsub("^[[:punct:]]+|[[:punct:]]+$", "", words)
# convert words to lowercase
words <- tolower(words)
# begin vector of bigrams as empty
bigrams <- c()
# iterate through words in search of bigrams
for(n in 2:length(words)){
# test whether word is preceded by the same word
if(words[n] == words[n-1]){
# if so, add word to list of bigrams
bigrams <- c(bigrams, words[n])
}
}
# do not attempt histogram of empty vector
if(0 == length(bigrams)){
stop("this function has no bigrams")
}
# convert bigrams to factor
bigrams <- as.factor(bigrams)
# create png file named the same as the txt file
pngFile <- gsub("txt$","png",txtFile)
# open connection to png file
png(pngFile)
# create histogram of bigrams
hist(as.numeric(bigrams),
breaks =
main = paste("Histogram of bigrams in", txtFile),
bigram <- function(txtFile){
# read file
words <- readLines(txtFile)
# convert apostrophes to digits to avoid regex split
words <- gsub("'s", "0s", words)
# split text into individual words by spaces
words <- unlist(strsplit(words, " "))
# remove punctuation that is not within words (ie. apostrophes)
words <- gsub("^[[:punct:]]+|[[:punct:]]+$", "", words)
# convert words to lowercase
words <- tolower(words)
# begin vector of bigrams as empty
bigrams <- c()
# iterate through words in search of bigrams
for(n in 2:length(words)){
# test whether word is preceded by the same word
if(words[n] == words[n-1]){
# if so, add word to list of bigrams
bigrams <- c(bigrams, words[n])
}
}
# do not attempt histogram of empty vector
if(0 == length(bigrams)){
stop("this function has no bigrams")
}
# convert bigrams to factor
bigrams <- as.factor(bigrams)
# create png file named the same as the txt file
pngFile <- gsub("txt$","png",txtFile)
# open connection to png file
png(pngFile)
# create histogram of bigrams
hist(as.numeric(bigrams),
main = paste("Histogram of bigrams in", txtFile),
xlab = paste(levels(bigrams), collapse = ", "),
border = "blue",
col = "green")
# close connection to png file
dev.off()
# print name of png file
print(paste("the histogram is located at", pngFile))
}
# create vector of five bigrams
words <- c("and; AND", "or, Or", "if... iF", "the, the", "wh'en, wh'en", "why, why",
"where, wheRe", "how - how?", "who? Who!", "what, what")
# expand five unique bigrams into 1000
words <- sample(words, 1000, replace = T)
# create temp.txt document
writeLines(words, "temp.txt")
# plot using bigram function:
bigram("temp.txt")
codilityFiles <- list.files("codility", "\\.R$|\\.sh$", recursive = T, full.names = T)
codilityFiles[10:15]
RFile <- "cmdFile <- commandArgs()[6]"
deparse(bigram)
head(deparse(bigram))
writeLines(c("bigram <- ",
# deparse function converts bigram function to character format
deparse(bigram),
# commandArgs provides a vector, of which the sixth element is the filename from the command line
"cmdFile <- commandArgs()[6]",
# as demonstrated here, biogram generates a histogram that matches the name of the input txt document
"bigram(cmdFile)"),
# store result in biogram.R
"bigram.R")
file.edit(bigram.R)
file.edit("bigram.R")
rm(list=ls())
bigram <-
function (txtFile)
bigram <-
function (txtFile)
{
words <- readLines(txtFile)
words <- gsub("'s", "0s", words)
words <- unlist(strsplit(words, " "))
words <- gsub("^[[:punct:]]+|[[:punct:]]+$", "", words)
words <- tolower(words)
bigrams <- c()
for (n in 2:length(words)) {
if (words[n] == words[n - 1]) {
bigrams <- c(bigrams, words[n])
}
}
if (0 == length(bigrams)) {
stop("this function has no bigrams")
}
bigrams <- as.factor(bigrams)
pngFile <- gsub("txt$", "png", txtFile)
png(pngFile)
hist(as.numeric(bigrams), main = paste("Histogram of bigrams in",
txtFile), xlab = paste(levels(bigrams), collapse = ", "),
border = "blue", col = "green")
dev.off()
print(paste("the histogram is located at", pngFile))
}
rm(list = ls())
bigram <-
function (txtFile)
{
words <- readLines(txtFile)
words <- gsub("'s", "0s", words)
words <- unlist(strsplit(words, " "))
words <- gsub("^[[:punct:]]+|[[:punct:]]+$", "", words)
words <- tolower(words)
bigrams <- c()
for (n in 2:length(words)) {
if (words[n] == words[n - 1]) {
bigrams <- c(bigrams, words[n])
}
}
if (0 == length(bigrams)) {
stop("this function has no bigrams")
}
bigrams <- as.factor(bigrams)
pngFile <- gsub("txt$", "png", txtFile)
png(pngFile)
hist(as.numeric(bigrams), main = paste("Histogram of bigrams in",
txtFile), xlab = paste(levels(bigrams), collapse = ", "),
border = "blue", col = "green")
dev.off()
print(paste("the histogram is located at", pngFile))
}
# bigram <-
function (txtFile)
# bigram <-
function (txtFile)
{
words <- readLines(txtFile)
words <- gsub("'s", "0s", words)
words <- unlist(strsplit(words, " "))
words <- gsub("^[[:punct:]]+|[[:punct:]]+$", "", words)
words <- tolower(words)
bigrams <- c()
for (n in 2:length(words)) {
if (words[n] == words[n - 1]) {
bigrams <- c(bigrams, words[n])
}
}
if (0 == length(bigrams)) {
stop("this function has no bigrams")
}
bigrams <- as.factor(bigrams)
pngFile <- gsub("txt$", "png", txtFile)
png(pngFile)
hist(as.numeric(bigrams), main = paste("Histogram of bigrams in",
txtFile), xlab = paste(levels(bigrams), collapse = ", "),
border = "blue", col = "green")
dev.off()
print(paste("the histogram is located at", pngFile))
}
rm(bigram)
# bigram <-
function (txtFile)
{
words <- readLines(txtFile)
words <- gsub("'s", "0s", words)
words <- unlist(strsplit(words, " "))
words <- gsub("^[[:punct:]]+|[[:punct:]]+$", "", words)
words <- tolower(words)
bigrams <- c()
for (n in 2:length(words)) {
if (words[n] == words[n - 1]) {
bigrams <- c(bigrams, words[n])
}
}
if (0 == length(bigrams)) {
stop("this function has no bigrams")
}
bigrams <- as.factor(bigrams)
pngFile <- gsub("txt$", "png", txtFile)
png(pngFile)
hist(as.numeric(bigrams), main = paste("Histogram of bigrams in",
txtFile), xlab = paste(levels(bigrams), collapse = ", "),
border = "blue", col = "green")
dev.off()
print(paste("the histogram is located at", pngFile))
}
writeLines(c("bigram <- ",
# deparse function converts bigram function to character format
deparse(bigram),
# commandArgs provides a vector, of which the sixth element is the filename from the command line
"cmdFile <- commandArgs()[6]",
# as demonstrated here, biogram generates a histogram that matches the name of the input txt document
"bigram(cmdFile)"),
# store result in biogram.R
"bigram.R")
file.edit("biogram.R")
file.edit("bigram.R")
writeLines(c("bigram <- ",
# deparse function converts bigram function to character format
deparse(bigram),
# commandArgs provides a vector, of which the sixth element is the filename from the command line
"cmdFile <- commandArgs()[6]",
# as demonstrated here, bigram generates a histogram that matches the name of the input txt document
"bigram(cmdFile)"),
# store result in bigram.R
"bigram.R")
bigram <- function(txtFile){
# read file
words <- readLines(txtFile)
# split text into individual words by spaces
words <- unlist(strsplit(words, " "))
# remove punctuation that precedes or trails words (but not possessive  apostrophes)
words <- gsub("^[[:punct:]]+|[[:punct:]]+$", "", words)
# convert words to lowercase
words <- tolower(words)
# begin vector of bigrams as empty
bigrams <- c()
# iterate through words in search of bigrams
for(n in 2:length(words)){
# test whether word is preceded by the same word
if(words[n] == words[n-1]){
# if so, add word to list of bigrams
bigrams <- c(bigrams, words[n])
}
}
# do not attempt histogram of empty vector
if(0 == length(bigrams)){
stop("this function has no bigrams")
}
# convert bigrams to factor
bigrams <- as.factor(bigrams)
# create png file named the same as the txt file
pngFile <- gsub("txt$","png",txtFile)
# open connection to png file
png(pngFile)
# create histogram of bigrams
hist(as.numeric(bigrams),
main = paste("Histogram of bigrams in", txtFile),
xlab = paste(levels(bigrams), collapse = ", "),
border = "blue",
col = "green")
# close connection to png file
dev.off()
# print name of png file
print(paste("the histogram is located at", pngFile))
}
writeLines(c("bigram <- ",
# deparse function converts bigram function to character format
deparse(bigram),
# commandArgs provides a vector, of which the sixth element is the filename from the command line
"cmdFile <- commandArgs()[6]",
# as demonstrated here, bigram generates a histogram that matches the name of the input txt document
"bigram(cmdFile)"),
# store result in bigram.R
"bigram.R")
file.edit('bigram.R')
q()
file.remove("bigram.R")
knitr::opts_chunk$set(echo = TRUE)
gsub("[\t\r\n]","_","\t\r\n")
list.files(pattern="[Bb]igram")
list.files(pattern="[Bb]igram|foo.png")
list.files(pattern="[Bb]igram|foo")
list.files(pattern="[Bb]igram(html|R)")
list.files(pattern="[Bb]igram.(html|R)")
args(zip)
zip("Bigram_JM.zip",list.files(pattern="[Bb]igram.(html|R)"))
file.edit("bigram.R")
list.files(pattern = "Rmd")
file.edit("Bigram.Rmd")
setwd("bigrams")
file.edit("readme.Rmd")
file.edit("readme.Rmd")
list.files()
file.edit("bigram.R")
source("bigram.R")
output
source("bigram.R")
source("bigram.R")
list.files()
bigram("data_1.txt")
bigram("data_1.txt",output = NULL)
bigram("data_1.txt",output = "view")
source("bigram.R")
bigram("data_1.txt",output = "view")
source("bigram.R")
bigram("data_1.txt",output = "view")
args(hist)
txtFile <- "data_3.txt"
# read file
words <- readLines(txtFile)
# split text into individual words by spaces, slashes, dashes, commas, periods, and semicolons
words <- unlist(strsplit(words, "[\n\r\t /,;]"))
# remove punctuation that precedes or trails words (but not possessive  apostrophes)
words <- gsub("^[[:punct:]]+|[[:punct:]]+$", "", words)
# remove empty elements from words vector
words <- words[grepl(".", words)]
# begin vector of bigrams as empty
bigrams <- c()
# iterate through words to build biagrams vector
for(n in 2:length(words)){
bigrams <- c(bigrams,
paste(words[n-1], words[n]))
}
bigrams <- table(bigrams)
head(bigrams)
max(bigrams)
unique(bigrams)
hist(bigrams)
hist(matrix(bigrams))
txtFile <- "data_1.txt"
# read file
words <- readLines(txtFile)
# split text into individual words by spaces, slashes, dashes, commas, periods, and semicolons
words <- unlist(strsplit(words, "[\n\r\t /,;]"))
# remove punctuation that precedes or trails words (but not possessive  apostrophes)
words <- gsub("^[[:punct:]]+|[[:punct:]]+$", "", words)
# remove empty elements from words vector
words <- words[grepl(".", words)]
# begin vector of bigrams as empty
bigrams <- c()
# iterate through words to build biagrams vector
for(n in 2:length(words)){
bigrams <- c(bigrams,
paste(words[n-1], words[n]))
}
bigrams <- table(bigrams)
head(bigrams)
M <- matrix(bigrams, ncol=1, dimnames = list(names(bigrams), NULL))
head(M)
M <- M / length(words)
head(M)
M <- M * length(words)
head(M)
DF <- data.frame(M, stringsAsFactors = F)
head(DF)
# Convert to matrix
bigrams <- matrix(bigrams, ncol = 1, dimnames = list(names(bigrams), NULL))
length(names(M))
length(rownames(M))
# Convert to data frame
bigrams <- data.frame(bigram = row.names(bigrams), tally = bigrams)
head(bigrams)
bigrams <- bigrams[,-1]
head(bigrams)
# begin vector of bigrams as empty
bigrams <- c()
# iterate through words to build biagrams vector
for(n in 2:length(words)){
bigrams <- c(bigrams,
paste(words[n-1], words[n]))
}
# Obtain tallies for the unique bigrams
bigrams <- table(bigrams)
# Convert to matrix
bigrams <- matrix(bigrams, ncol = 1, dimnames = list(names(bigrams), NULL))
# Convert to data frame
bigrams <- data.frame(tally = bigrams)
head(bigrams)
?hist
hist(words,freq = T)
hist(bigrams[,1],freq = T)
?hist
hist(bigrams[,1],freq = F)
source("bigrams.R")
source("bigram.R")
args(source)
rm(list = ls())
source("bigram.R")
bigram("data_1.txt")
bigram("data_1.txt", output = "")
source("bigram.R")
bigram("data_1.txt", output = "")
source("bigram.R")
bigram("data_1.txt", output = "")
q()
